#!/usr/bin/env bash

REPOSITERY_URL="https://github.com/Sakura1943/dotfiles.git"

COMMAND=$1
OPTION1=$2
OPTION2=$3
HOME=$HOME
BIN_NAME="dotter"
VERSION="0.1.0"

COLOR_NULL='\033[0m'
COLOR_RED='\033[0;31m'
COLOR_CYAN='\033[0;36m'
COLOR_GREEN='\033[0;32m'
COLOR_BROWN='\033[0;33m'

COLOR_RED_BOLD='\033[1;31m'
COLOR_CYAN_BOLD='\033[1;36m'
COLOR_GREEN_BOLD='\033[1;32m'
COLOR_BROWN_NOLD='\033[1;33m'

function info() {
	echo -e "${COLOR_CYAN}INFO: ${COLOR_NULL} $*"
}

function success() {
	echo -e "${COLOR_GREEN}SUCCESS: ${COLOR_NULL} $*"
}

function warn() {
	echo -e "${COLOR_BROWN}WARN: ${COLOR_NULL} $*"
}

function error() {
	echo -e "${COLOR_RED}ERROR: ${COLOR_NULL} $*" >&2
}

function help() {
	echo -e """Dotfiles 部署工具

${COLOR_BROWN_NOLD}USAGE${COLOR_NULL}:
    ${BIN_NAME} <COMMAND> [...OPTIONS]
    ${BIN_NAME} help <COMMAND>

${COLOR_BROWN_NOLD}COMMAND${COLOR_NULL}:
    ${COLOR_GREEN_BOLD}test${COLOR_NULL}                测试程序是否可用
    ${COLOR_GREEN_BOLD}deploy${COLOR_NULL}              部署程序
    ${COLOR_GREEN_BOLD}help${COLOR_NULL}                打印命令帮助信息

${COLOR_BROWN_NOLD}OPTIONS${COLOR_NULL}:
    ${COLOR_GREEN_BOLD}-h${COLOR_NULL}, ${COLOR_GREEN_BOLD}--help${COLOR_NULL}          打印帮助信息
    ${COLOR_GREEN_BOLD}-V${COLOR_NULL}, ${COLOR_GREEN_BOLD}--version${COLOR_NULL}       打印版本信息
"""
}

function deplay_help_information() {
	echo -e """部署程序

${COLOR_BROWN_NOLD}USAGE${COLOR_NULL}: ${BIN_NAME} deploy [...OPTIONS]

${COLOR_BROWN_NOLD}OPTIONS${COLOR_NULL}:
    ${COLOR_GREEN_BOLD}--url${COLOR_NULL}               dotfiles url(default: 脚本内变量\$REPOSITERY_URL)
"""
}

function test_help_information() {
	echo -e """测试部署程序

${COLOR_BROWN_NOLD}USAGE${COLOR_NULL}: ${BIN_NAME} test [...OPTIONS]

${COLOR_BROWN_NOLD}OPTIONS${COLOR_NULL}:
    ${COLOR_GREEN_BOLD}--url${COLOR_NULL}               dotfiles url(default: 脚本内变量\$REPOSITERY_URL)
"""
}

function command_help() {
	case $1 in
	"deploy")
		deplay_help_information
		;;
	"test")
		test_help_information
		;;
	"")
		error "请输入${COLOR_BROWN_NOLD} '-h|--help' ${COLOR_NULL}获取帮助"
		;;
	*)
		error "未知命令${COLOR_BROWN_NOLD} '$1'${COLOR_NULL}, 获取帮助信息失败"
		;;
	esac
}

case $COMMAND in
"test")
	HOME="test"
	case "${OPTION1}" in
	"--url")
		REPOSITERY_URL="${OPTION2}"
		;;
	"") ;;
	*)
		error "未知参数${COLOR_BROWN_NOLD} '${OPTION1}'${COLOR_NULL}, 请输入${COLOR_BROWN_NOLD} 'help test' ${COLOR_NULL} 获取帮助"
		exit
		;;
	esac

	info "测试..."
	;;
"-h" | "--help")
	help
	exit
	;;
"-V" | "--version")
	echo "${BIN_NAME} v${VERSION}"
	exit
	;;
"help")
	command_help "$OPTION1"
	exit
	;;
"deploy")
	case "${OPTION1}" in
	"--url")
		REPOSITERY_URL="${OPTION2}"
		;;
	"") ;;
	*)
		error "未知参数${COLOR_BROWN_NOLD} '${OPTION1}'${COLOR_NULL}, 请输入${COLOR_BROWN_NOLD} 'help deploy' ${COLOR_NULL} 获取帮助"
		exit
		;;
	esac
	;;
*)
	if [[ "$COMMAND" == "" ]]; then
		error "请输入${COLOR_BROWN_NOLD} '-h|--help' ${COLOR_NULL}获取帮助"
	else
		error "未知命令${COLOR_BROWN_NOLD} '${COMMAND}' ${COLOR_NULL}, 请输入${COLOR_BROWN_NOLD} '-h|--help' ${COLOR_NULL}获取帮助"
	fi
	exit
	;;
esac

DOTTERFILES_PATH="$HOME/.local/share/dotfiles"
info "HOME: $HOME"
info "SHELL: ${SHELL##*/}"
info "REPOSITERY_URL: ${REPOSITERY_URL}"

function create_folder_that_does_not_exists() {
	if [[ $(ls -l $1 2>/dev/null | wc -l) == 0 ]]; then
		warn "路径: '$1' 不存在，正在创建"
		mkdir -p $1
		if [[ $? == 0 ]]; then
			success "路径: '$1' 创建成功"
		else
			error "Status code: $?"
			exit
		fi
	fi
}

function copy_to_target() {
	info "正在拷贝 '${2}' 到 '$1'"
	cp -rf ${@:3} $1
	if [[ $? == 0 ]]; then
		success "成功将 '${2}' 拷贝到 '$1'"
	else
		error "Status code: $?"
		exit
	fi
}

if [[ $(ls -l $DOTTERFILES_PATH 2>/dev/null | wc -l) == 0 ]]; then
	info "克隆配置文件仓库"
	git clone "$REPOSITERY_URL" $DOTTERFILES_PATH
	if [[ $? == 0 ]]; then
		success "创建仓库成功, 路径: $DOTTERFILES_PATH"
	else
		error "Status code: $?"
		exit
	fi
else
	warn "配置文件仓库存在"
fi

copy_to_target "$HOME/.bashrc" "$DOTTERFILES_PATH/.bashrc" "$DOTTERFILES_PATH/.bashrc"
copy_to_target "$HOME/.zshrc" "$DOTTERFILES_PATH/.zshrc" "$DOTTERFILES_PATH/.zshrc"

create_folder_that_does_not_exists "$HOME/.config"
copy_to_target "$HOME/.config" "$DOTTERFILES_PATH/.config" $DOTTERFILES_PATH/config/*

create_folder_that_does_not_exists "$HOME/.config/nvim"
copy_to_target "$HOME/.config/nvim" "$DOTTERFILES_PATH/lazyvim/.config/nvim" $DOTTERFILES_PATH/lazyvim/.config/nvim/*

create_folder_that_does_not_exists "$HOME/.local"
copy_to_target "$HOME/.local" "$DOTTERFILES_PATH/local" $DOTTERFILES_PATH/local/*

echo 'export PATH=$PATH:$HOME/.scripts' >>"$HOME/.bashrc"
info "echo 'export PATH=\$PATH:$HOME/.scripts' >> \"$HOME/.bashrc\""

if [[ ${SHELL##*/} == "bash" ]]; then
	source "$HOME/.bashrc"
	info "source \"$HOME/.bashrc\""
elif [[ ${SHELL##*/} == "zsh" ]]; then
	source "$HOME/.zshrc"
	info "source \"$HOME/.zshrc\""
fi
